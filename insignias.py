# -*- coding: utf-8 -*-
"""Insignias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QItL0RTq1JW2GMDU3FdUPH-NEPe5d9_9

Optimización de Rutas

En un mundo cada vez más interconectado, la optimización de rutas se ha convertido en un desafío crucial en diversas áreas, desde la logística y el transporte hasta la planificación de viajes y la gestión de redes de comunicación. En este escenario, se enfrenta el desafío de encontrar la ruta más corta entre dos ciudades específicas en un extenso mapa de conexiones. El mapa de conexiones representa una red compleja de ciudades interconectadas, donde cada ciudad está conectada a otras por una serie de rutas. Cada conexión está asociada con una distancia que indica la longitud o costo para viajar de una ciudad a otra. El propósito fundamental es determinar la ruta más corta entre una ciudad de origen y una ciudad de destino. Esta ruta óptima no solo implica la distancia mínima, sino también el camino más eficiente y práctico para el traslado entre las dos ciudades.
"""

def cargar_grafo():
    grafo = {

'A': {'B': 5, 'C': 8, 'D': 9},

'B': {'A': 5, 'E': 15, 'F': 7},

'C': {'A': 8, 'G': 12, 'H': 10},

'D': {'A': 9, 'I': 11, 'J': 6},

'E': {'B': 15, 'K': 9, 'L': 13},

'F': {'B': 7, 'M': 8, 'N': 6},

'G': {'C': 12, 'O': 10, 'P': 5},

'H': {'C': 10, 'Q': 11, 'R': 7},

'I': {'D': 11, 'S': 14, 'T': 8},

'J': {'D': 6, 'U': 9, 'V': 12},

'K': {'E': 9},

'L': {'E': 13},

'M': {'F': 8},

'N': {'F': 6},

'O': {'G': 10},

'P': {'G': 5},

'Q': {'H': 11},

'R': {'H': 7},

'S': {'I': 14},

'T': {'I': 8},

'U': {'J': 9},

'V': {'J': 12}

}
    return grafo


def dfs(graph, start, end, visited=None, path=None):
    if visited is None:
        visited = set()
    if path is None:
        path = []

    visited.add(start)
    path.append(start)

    if start == end:
        return path

    for neighbor, distance in graph.get(start, {}).items():
        if neighbor not in visited:
            new_path = dfs(graph, neighbor, end, visited, path)
            if new_path:
                return new_path

    path.pop()
    return None

def main():
    grafo = cargar_grafo()

    origen, destino = input().split()
    ruta_optima = dfs(grafo, origen, destino)

    if ruta_optima:
        print(*ruta_optima)
    else:
        print("None")

if __name__ == "__main__":
    main()